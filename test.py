import torch
from sklearn.cluster import KMeans

# 数据
data = torch.tensor([[0.0, 0.2185, 0.2216, 0.2912, 0.2925, 0.3478, 0.5421, 0.3835, 0.3405, 0.2958],
                     [0.2185, 0.0, 0.2166, 0.2527, 0.2423, 0.2418, 0.3443, 0.3756, 0.2887, 0.2747],
                     [0.2216, 0.2166, 0.0, 0.2339, 0.2948, 0.2647, 0.5357, 0.4294, 0.2963, 0.2769],
                     [0.2912, 0.2527, 0.2339, 0.0, 0.2098, 0.1757, 0.5018, 0.3668, 0.1975, 0.2148],
                     [0.2925, 0.2423, 0.2948, 0.2098, 0.0, 0.2450, 0.4743, 0.2348, 0.1866, 0.2634],
                     [0.3478, 0.2418, 0.2647, 0.1757, 0.2450, 0.0, 0.4365, 0.4039, 0.2314, 0.3016],
                     [0.5421, 0.3443, 0.5357, 0.5018, 0.4743, 0.4365, 0.0, 0.5679, 0.5102, 0.4886],
                     [0.3835, 0.3756, 0.4294, 0.3668, 0.2348, 0.4039, 0.5679, 0.0, 0.4109, 0.3952],
                     [0.3405, 0.2887, 0.2963, 0.1975, 0.1866, 0.2314, 0.5102, 0.4109, 0.0, 0.2797],
                     [0.2958, 0.2747, 0.2769, 0.2148, 0.2634, 0.3016, 0.4886, 0.3952, 0.2797, 0.0]])

# 超参数
num_clusters = 4
num_iterations = 100

# 转换数据为 numpy 数组并运行 kmeans 聚类
kmeans = KMeans(n_clusters=num_clusters, max_iter=num_iterations)
labels = kmeans.fit_predict(data.numpy())

# 打印聚类结果
print(labels)
